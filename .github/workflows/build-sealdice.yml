name: Build and Push SealDice Docker Images

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (pre-release/stable)'
        required: false
        default: 'auto'
  repository_dispatch:

env:
  DOCKERHUB_REPO: shiaworkshop/sealdice

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    outputs:
      main_tag: ${{ steps.load_version.outputs.main_tag }}
      sec_tag: ${{ steps.load_version.outputs.sec_tag }}
      commit_tag: ${{ steps.load_version.outputs.commit_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: 确定构建类型
        id: determine_type
        run: |
          # 检查输入参数
          if [ "${{ inputs.build_type }}" != "auto" ]; then
            echo "使用传入的构建类型: ${{ inputs.build_type }}"
            BUILD_TYPE="${{ inputs.build_type }}"
          else
            echo "没有指定构建类型，自动选择最新版本"
            # 如果没有传递参数，自动选择最新稳定版，没有稳定版则用预发布
            if [ -f "last_release.json" ]; then
              BUILD_TYPE="stable"
            elif [ -f "pre_release.json" ]; then
              BUILD_TYPE="pre-release"
            else
              echo "错误：找不到任何版本信息文件"
              exit 1
            fi
          fi
          
          echo "最终构建类型: $BUILD_TYPE"
          echo "BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_ENV
      
      - name: 加载版本信息
        id: load_version
        run: |
          case "$BUILD_TYPE" in
            "pre-release")
              CONFIG_FILE="pre_release.json"
              ;;
            "stable")
              CONFIG_FILE="last_release.json"
              ;;
            *)
              echo "不支持的构建类型: $BUILD_TYPE"
              exit 1
              ;;
          esac
          
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
          
          # 解析配置文件
          DATE=$(jq -r '.date' $CONFIG_FILE)
          DOWNLOAD_URL=$(jq -r '.downloads.linux_'${{ matrix.arch }} $CONFIG_FILE)
          
          if [ "$BUILD_TYPE" = "pre-release" ]; then
            COMMIT_HASH=$(jq -r '.commit_hash' $CONFIG_FILE)
            MAIN_TAG="latest"
            SEC_TAG="edge"
            COMMIT_TAG="${COMMIT_HASH:0:7}"
          else
            TAG_NAME=$(jq -r '.tag_name' $CONFIG_FILE)
            MAIN_TAG="latest"
            SEC_TAG="stable"
            COMMIT_TAG="$TAG_NAME"
          fi
          
          echo "DOWNLOAD_URL=$DOWNLOAD_URL" >> $GITHUB_ENV
          echo "MAIN_TAG=$MAIN_TAG" >> $GITHUB_ENV
          echo "SEC_TAG=$SEC_TAG" >> $GITHUB_ENV
          echo "COMMIT_TAG=$COMMIT_TAG" >> $GITHUB_ENV
          
          # 输出标签信息
          echo "main_tag=$MAIN_TAG" >> $GITHUB_OUTPUT
          echo "sec_tag=$SEC_TAG" >> $GITHUB_OUTPUT
          echo "commit_tag=$COMMIT_TAG" >> $GITHUB_OUTPUT

      # 构建镜像
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build for ${{ matrix.arch }}
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/${{ matrix.arch }}
          push: true
          build-args: |
            DOWNLOAD_URL=${{ env.DOWNLOAD_URL }}
          tags: |
            ${{ env.DOCKERHUB_REPO }}:${{ env.MAIN_TAG }}-${{ matrix.arch }}
            ${{ env.DOCKERHUB_REPO }}:${{ env.SEC_TAG }}-${{ matrix.arch }}
            ${{ env.DOCKERHUB_REPO }}:${{ env.COMMIT_TAG }}-${{ matrix.arch }}
          labels: |
            arch=${{ matrix.arch }}
            
  create-manifest:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: 创建并推送 Manifest 清单
        run: |
          # 从需要的工作中获取标签值
          MAIN_TAG=${{ needs.build-and-push.outputs.main_tag }}
          SEC_TAG=${{ needs.build-and-push.outputs.sec_tag }}
          COMMIT_TAG=${{ needs.build-and-push.outputs.commit_tag }}
          REPO=${{ env.DOCKERHUB_REPO }}
          
          # 定义要处理的所有标签
          TAGS=("$MAIN_TAG" "$SEC_TAG" "$COMMIT_TAG")
          
          # 循环处理每个标签
          for TAG in "${TAGS[@]}"; do
            echo "处理标签: $REPO:$TAG"
            
            # 创建amd64的manifest
            docker manifest create $REPO:$TAG \
              --amend $REPO:$TAG-amd64 \
              --amend $REPO:$TAG-arm64
            
            # 推送manifest到Docker Hub
            docker manifest push $REPO:$TAG
          done
