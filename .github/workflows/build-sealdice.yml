name: Build and Push SealDice Docker Images

on:
  repository_dispatch:
    types: [build-sealdice]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录，用于检查文件变更
          
      - name: 确定构建类型
        id: determine_type
        run: |
          # 比较上次提交的改动
          PRE_MODIFIED=$(git diff --name-only HEAD^ HEAD | grep pre_release.json || true)
          STABLE_MODIFIED=$(git diff --name-only HEAD^ HEAD | grep last_release.json || true)
          
          if [ -n "$PRE_MODIFIED" ]; then
            echo "RELEASE_TYPE=pre-release" >> $GITHUB_ENV
            CONFIG_FILE="pre_release.json"
          elif [ -n "$STABLE_MODIFIED" ]; then
            echo "RELEASE_TYPE=stable" >> $GITHUB_ENV
            CONFIG_FILE="last_release.json"
          else
            echo "未检测到版本文件更新，退出"
            exit 1
          fi
          
          echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
      
      - name: 读取版本信息
        id: read_version
        run: |
          # 从JSON文件中读取数据
          jq . ${{ env.CONFIG_FILE }} > config_details.json
          cat config_details.json
          
          # 提取基本信息
          if [ "${{ env.RELEASE_TYPE }}" = "pre-release" ]; then
            DATE=$(jq -r '.date' ${{ env.CONFIG_FILE }})
            COMMIT_HASH=$(jq -r '.commit_hash' ${{ env.CONFIG_FILE }})
            COMMIT_TAG="dev-$DATE-$COMMIT_HASH"
            MAIN_TAG="edge"
          else
            TAG_NAME=$(jq -r '.tag_name' ${{ env.CONFIG_FILE }})
            COMMIT_TAG=$TAG_NAME
            MAIN_TAG="latest"
          fi
          
          # 根据当前架构选择下载URL
          DOWNLOAD_URL=$(jq -r '.downloads.linux_'${{ matrix.arch }} ${{ env.CONFIG_FILE }})
          
          echo "MAIN_TAG=$MAIN_TAG" >> $GITHUB_ENV
          echo "COMMIT_TAG=$COMMIT_TAG" >> $GITHUB_ENV
          echo "DOWNLOAD_URL=$DOWNLOAD_URL" >> $GITHUB_ENV
          
          # 打印验证信息
          echo "构建参数:"
          echo "类型: ${{ env.RELEASE_TYPE }}"
          echo "主标签: $MAIN_TAG"
          echo "提交标签: $COMMIT_TAG"
          echo "下载URL: $DOWNLOAD_URL"
          echo "架构: ${{ matrix.arch }}"

      # 后续构建步骤保持不变...
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build for ${{ matrix.arch }}
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/${{ matrix.arch }}
          push: true
          build-args: |
            DOWNLOAD_URL=${{ env.DOWNLOAD_URL }}
          tags: |
            yourusername/sealdice:${{ env.MAIN_TAG }}
            yourusername/sealdice:${{ env.COMMIT_TAG }}
